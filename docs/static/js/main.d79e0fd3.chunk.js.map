{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpectApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","autoFocus","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized","useFetchGifs","loading","object","setObject","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpectApp","categories","prototype","default","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,MAhCf,YAAuC,IAAjBC,EAAgB,EAAhBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OAEtCJ,EAAc,KAId,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAjBc,SAACL,GAEvBF,EAAcE,EAAEM,OAAOF,QAgBfG,UAAU,Q,+BCzBbC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAIFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,UAAUZ,QAXf,kBAiBZM,GAjBY,4CAAH,sDCsBLO,EAnBM,SAACf,GAClB,MAA4Bb,mBAAS,CACjCoB,KAAM,GACNS,SAAS,IAFb,mBAAOC,EAAP,KAAeC,EAAf,KAeA,OAVAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAC,GACFH,EAAU,CACNX,KAAMc,EACNL,SAAS,SAGtB,CAAChB,IAEGiB,GCPIK,EAVK,SAAC,GAAqB,EAApBX,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OACI,sBAAKqB,UAAU,yCAAf,UACI,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,4BAAIA,QCiBDc,EApBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAEf,EAAgCe,EAAaf,GAAhCa,EAAb,EAAON,KAAcS,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIO,UAAU,oCAAd,SAAmDvB,IAElDgB,GAAW,mBAAGO,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SACKV,EAAOJ,KAAI,SAAAC,GAAG,OACf,cAAC,EAAD,eAEIA,GADCA,EAAIC,aCZnBgB,EAAe,WAEjB,MAAoCxC,mBAAS,CAAC,SAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ0C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAAyBA,SAAUA,GAArBA,YAQtC2B,EAAaE,UAAY,GAIzBF,EAAaG,QAAU,GAIRH,Q,MC7BfI,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d79e0fd3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nfunction AddCategory({setCategories}) {\n\n    const [inputValue, setInputValue] = useState(\"\")\n\n    const handleInputChange = (e) => {\n        //console.log(e.target.value);\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategories(cats => [inputValue, ...cats]);\n        //setCategories(cats => [inputValue]);\n        setInputValue(\"\");\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                autoFocus=\"\"\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=pA1agwFaFeeEo7VuGIvVUmQkocaIRc40`;\n    const response = await fetch(url)\n    const { data } = await response.json();\n\n    //console.log(data);\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized.url\n        }\n    }\n    );\n\n    //console.log(gifs);\n    return gifs;\n}","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n    const [object, setObject] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setObject({\n                    data: imgs,\n                    loading: false\n                });\n            });\n    }, [category])\n\n    return object;\n}\n\nexport default useFetchGifs\n","import React from 'react'\n\nconst GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            \n            <div className=\"card-grid\">\n                {images.map(img => \n                <GifGridItem\n                key={img.id} \n                {...img} />)}\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import React, {useState} from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n//import PropTypes from \"prop-types\";\n\nconst GifExpectApp = () => {\n    \n    const [categories, setCategories] = useState([\"Goku\"])\n\n    /*const handleAdd = () => {\n        setCategories([... categories, \"Naruto\"]);\n    }*/\n\n    return (\n        <>\n            <h2>GifExpectApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr/>\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid key={category}  category={category}/>\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nGifExpectApp.prototype = {\n\n}\n\nGifExpectApp.default = {\n\n}\n\nexport default GifExpectApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpectApp from './GifExpectApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpectApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}